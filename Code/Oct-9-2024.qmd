---
title: "Oct 9 In Class"
format: html
editor: visual
---

```{r}
#set up
rm(list=ls())
library(tidyverse)
library(here)
```

```{r}
#read in data
tomatoes <- read.csv(here("Data", "tomato_data.csv"))
```

## Warm up

Return 3, 7, 9 rows

```{r}
slice(tomatoes, c(3, 7, 9))

#OR use piping... (better)
tomatoes %>% slice(c(3,7,9)) %>% View()
#Take tomatoes data frame %>% AND THEN slice the rows AND THEN view the results of this (but doesn't make a new object)

#the more modern version of piping operator is |>
```

Find all plants from fertilizer treatment with weight \> or equal to 145g

```{r}
tomatoes %>%
  filter(Treatment == "Fertilizer" & Avg_tomato_weight_g >= 145) %>% View()
#Success

```

# Tips and Tricks

## Save your changes (to a new file in an output folder)

Make the output folder - not embedded in another folder

```{r}
dir.create(here("Outputs"))
```

Now save the file

```{r}
write.csv(tomatoes,here("Outputs", "tomatoes_fixed.csv"), row.names = FALSE) #saving the current version as this name
# The row.names = FALSE prevents R from adding a column of row numbers to the output file
```

```{r}
toms2 <- read.csv(here("Outputs", "tomatoes_fixed.csv"))
#Notice without having the row.names = FALSE this happens --> new one has 6 variables and has a new column called "X" 

# NOTE This is being saved as a text file so no info about structure is saved (data types not saved as it was before)
```

# Using chp 3 info

Using dplyr "verbs"

The main commands to know well are filter(), group_by(), and summarise()

```{r}
rm(list=ls()) #get rid of tomato data in the environment
library(tidyverse)
library(here)
```

```{r}
Lead <- read.csv(here("Data", "NoCoLead.csv")) #read in data
```

What if we want to know the average number of tests given in the data set

```{r}
my_lead <- lead |> 
  summarize(mean_num_tests = sum(num_tests)) |> 
  View()

#take lead AND THEN summarize
#AND THEN view
```

What is the mean number of tests per year?

```{r}
lead_summary <- lead |> 
  group_by(Year) |> 
  summarise(
    mean_tests_per_year = mean(num_tests)
  ) 
```

NOTE –\> Output table will always have a column for everything put into group_by() – think about what want output to look like when deciding what to put into group_by

Whatever in summarise() also has column in output

```{r}
my_lead <- lead |> 
  summarise(mean_num_tests = sum(num_tests))
```
